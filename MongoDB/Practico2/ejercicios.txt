// Ejercicio 1:
use('empresa')
db.empleados.insertMany([
    {
        nombre: "Juan",
        edad: "30",
        puesto: "Ventas"  
    },
    {
        nombre: "Ana",
        edad: "24",
        puesto: "Marketing"  
    },
    {
        nombre: "Luis",
        edad: "35",
        puesto: "Desarrollo"  
    },
    {
        nombre: "Maria",
        edad: "28",
        puesto: "Recursos Humanos"  
    },
    {
        nombre: "Pedro",
        edad: "40",
        puesto: "Gerente"  
    },
    {
        nombre: "Sofia",
        edad: "20",
        puesto: "Pasante"
    }
])
db.empleados.updateOne(
    { nombre: "Juan" },
    { $set: { edad: "31" } }
)
db.empleados.remove(
    { puesto: "Pasante" }
)
// Ejercicio 2:
db.empleados.find({
    $and: [{edad:{$gte: "25", $lte: "40"}}]
})
// Ejercicio 3:
db.empleados.find({}, {nombre:1, puesto:1, _id:0})
// Ejercicio 4:
db.empleados.insertMany([{
    nombre: "Carlos",
    direccion:{ciudad: "Barcelona", codigoPostal: "08001"}
},
{
    nombre: "Laura",
    direccion:{ciudad: "Madrid", codigoPostal: "28001"}
}
])
// Ejercicio 5:
db.ventas.insertMany([
    {
        producto: "Laptop",
        precio_unitario: 1000,
        cantidad: 5
    },
    {
        producto: "Telefono",
        precio_unitario: 500,
        cantidad: 10
    },
    {
        producto: "Tablet",
        precio_unitario: 300,
        cantidad: 8
    }
])
db.ventas.aggregate([
    {
        $group: {
            _id: "$producto",
            totalVentas: { $sum:["$precio_unitario" * "$cantidad"]}
        }
    },
    {$sort: { totalVentas: -1 }}
])
// Ejercicio 6:
db.clientes.insertMany([
    {
        nombre: "Juan",
        apellido: "Pérez",
        edad: 30,
        direccion: { ciudad: "Buenos Aires", codigoPostal: "C1000" }
    },
    {
        nombre: "Ana",
        apellido: "Gómez",
        edad: 24,
        direccion: { ciudad: "Madrid", codigoPostal: "28001" }
    },
    {
        nombre: "Luis",
        apellido: "Fernández",
        edad: 35,
        direccion: { ciudad: "Barcelona", codigoPostal: "08001" }
    }
])
db.clientes.createIndex({ apellido: 1, nombre: 1 })
// Ejercicio 7:
db.cursos.insertMany([
    {
        nombre: "Curso de MongoDB",
        id_curso: 1,
    },
    {
        nombre: "Curso de JavaScript",
        id_curso: 2,
    },
    {
        nombre: "Curso de Python",
        id_curso: 3,
    }
])
db.alumnos.insertMany([
    {
        nombre: "Carlos",
        edad: 20,
        id_curso: [1, 2],
    },
    {
        nombre: "Laura",
        edad: 22,
        id_curso: [1, 3],
    },
    {
        nombre: "Pedro",
        edad: 28,
        id_curso: [2, 3],
    },
    {
        nombre: "Sofia",
        edad: 19,
        id_curso: [1],
    }
])
// Ejercicio 8:
db.alumnos.aggregate([
    {
        $lookup: {
            from: "cursos",
            localField: "id_curso",
            foreignField: "id_curso",
            as: "cursos"
        }
    }
])
// Ejercicio 9: La ventaja de usar la replica set es que los datos se escriben varias veces en diferentes localidades lo que permite ser mas tolerable a fallos y si sucede lo mencionado, se recuperan los datos que ya se escribieron en otro lado. 
Por otra parte el sharding aporta en una base de datos de alto volumen para reducir la carga de trabajo y trafico de datos enviando pedazos de datos a diferentes servidores o localidades.

// Ejercicio 10:
db.createUser({user: "Usuario", pwd: "1234", roles: [{ role: "readWrite", db: "empresa" }]})

// Comandos para hacer backup y restauración de una base de datos desde la terminal:
// mongodump --db empresa --out /Descargas/backup
// mongorestore --db empresa /Descargas/backup/empresa